ggplot(demo_df, aes(x = ladder_us, y = md_anx_prior_diag)) +
geom_point(color = "black", size = 2) +  # Scatter plot points
geom_smooth(method = "lm", se = FALSE, color = "grey") +  # Add a linear regression line
labs(title = "Correlation between Subjective and Objective SES",
x = "Subjective SES",
y = "Prior mood diagnosis") +  # Add titles and labels
theme_minimal() +  # Use a minimal theme for a clean look
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),  # Title formatting
axis.title = element_text(size = 12)  # Axis title formatting
) +
annotate("text", x = max(demo_df$ladder_us), y = min(demo_df$ses), label = cor_text, hjust = 1, vjust = -1, size = 5, color = "black") +  # Add correlation coefficient
annotate("text", x = max(demo_df$ladder_us), y = min(demo_df$ses), label = p_value_text, hjust = 1, vjust = -2.5, size = 5, color = "black")  # Add p-value
#plot(ses ~ ladder_us, data=demo_df)
#cor.test(demo_df$ses, demo_df$ladder_us)
# subjective vs objective SES correlation
# Calculate correlation
cor_result <- cor.test(demo_df$ses, demo_df$md_anx_prior_diag)
cor_text <- paste("r =", round(cor_result$estimate, 2))
p_value_text <- paste("p =", format.pval(cor_result$p.value, digits = 2))
# Create the plot with correlation text and p-value
ggplot(demo_df, aes(x = ladder_us, y = md_anx_prior_diag)) +
geom_point(color = "black", size = 2) +  # Scatter plot points
geom_smooth(method = "lm", se = FALSE, color = "grey") +  # Add a linear regression line
labs(title = "Correlation between Subjective and Objective SES",
x = "Subjective SES",
y = "Prior mood diagnosis") +  # Add titles and labels
theme_minimal() +  # Use a minimal theme for a clean look
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),  # Title formatting
axis.title = element_text(size = 12)  # Axis title formatting
) +
annotate("text", x = max(demo_df$ladder_us), y = min(demo_df$ses), label = cor_text, hjust = 1, vjust = 1, size = 5, color = "black") +  # Add correlation coefficient
annotate("text", x = max(demo_df$ladder_us), y = min(demo_df$ses), label = p_value_text, hjust = 1, vjust = 2.5, size = 5, color = "black")  # Add p-value
#plot(ses ~ ladder_us, data=demo_df)
#cor.test(demo_df$ses, demo_df$ladder_us)
# subjective vs objective SES correlation
# Calculate correlation
cor_result <- cor.test(demo_df$ses, demo_df$md_anx_prior_diag)
cor_text <- paste("r =", round(cor_result$estimate, 2))
p_value_text <- paste("p =", format.pval(cor_result$p.value, digits = 2))
# Create the plot with correlation text and p-value
ggplot(demo_df, aes(x = ladder_us, y = md_anx_prior_diag)) +
geom_point(color = "black", size = 2) +  # Scatter plot points
geom_smooth(method = "lm", se = FALSE, color = "grey") +  # Add a linear regression line
labs(title = "Correlation between Subjective and Objective SES",
x = "Subjective SES",
y = "Prior mood diagnosis") +  # Add titles and labels
theme_minimal() +  # Use a minimal theme for a clean look
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),  # Title formatting
axis.title = element_text(size = 12)  # Axis title formatting
) +
annotate("text", x = max(demo_df$ladder_us), y = min(demo_df$ses), label = cor_text, hjust = 1, vjust = -1, size = 5, color = "black") +  # Add correlation coefficient
annotate("text", x = max(demo_df$ladder_us), y = min(demo_df$ses), label = p_value_text, hjust = 1, vjust = -2.5, size = 5, color = "black")  # Add p-value
#plot(ses ~ ladder_us, data=demo_df)
#cor.test(demo_df$ses, demo_df$ladder_us)
# subjective vs objective SES correlation
# Calculate correlation
cor_result <- cor.test(demo_df$ses, demo_df$md_anx_prior_diag)
cor_text <- paste("r =", round(cor_result$estimate, 2))
p_value_text <- paste("p =", format.pval(cor_result$p.value, digits = 2))
# Create the plot with correlation text and p-value
ggplot(demo_df, aes(x = ladder_us, y = md_anx_prior_diag)) +
geom_point(color = "black", size = 2) +  # Scatter plot points
geom_smooth(method = "lm", se = FALSE, color = "grey") +  # Add a linear regression line
labs(
x = "Subjective SES",
y = "Prior mood diagnosis") +  # Add titles and labels
theme_minimal() +  # Use a minimal theme for a clean look
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),  # Title formatting
axis.title = element_text(size = 12)  # Axis title formatting
) +
annotate("text", x = max(demo_df$ladder_us), y = min(demo_df$ses), label = cor_text, hjust = 1, vjust = -1, size = 5, color = "black") +  # Add correlation coefficient
annotate("text", x = max(demo_df$ladder_us), y = min(demo_df$ses), label = p_value_text, hjust = 1, vjust = -2.5, size = 5, color = "black")  # Add p-value
#plot(ses ~ ladder_us, data=demo_df)
#cor.test(demo_df$ses, demo_df$ladder_us)
# subjective vs objective SES correlation
# Calculate correlation
cor_result <- cor.test(demo_df$ladder_us, demo_df$md_anx_prior_diag)
cor_text <- paste("r =", round(cor_result$estimate, 2))
p_value_text <- paste("p =", format.pval(cor_result$p.value, digits = 2))
# Create the plot with correlation text and p-value
ggplot(demo_df, aes(x = ladder_us, y = md_anx_prior_diag)) +
geom_point(color = "black", size = 2) +  # Scatter plot points
geom_smooth(method = "lm", se = FALSE, color = "grey") +  # Add a linear regression line
labs(
x = "Subjective SES",
y = "Prior mood diagnosis") +  # Add titles and labels
theme_minimal() +  # Use a minimal theme for a clean look
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),  # Title formatting
axis.title = element_text(size = 12)  # Axis title formatting
) +
annotate("text", x = max(demo_df$ladder_us), y = min(demo_df$ses), label = cor_text, hjust = 1, vjust = -1, size = 5, color = "black") +  # Add correlation coefficient
annotate("text", x = max(demo_df$ladder_us), y = min(demo_df$ses), label = p_value_text, hjust = 1, vjust = -2.5, size = 5, color = "black")  # Add p-value
#plot(ses ~ ladder_us, data=demo_df)
#cor.test(demo_df$ses, demo_df$ladder_us)
# subjective vs objective SES correlation
# Calculate correlation
cor_result <- cor.test(demo_df$ladder_us, demo_df$bdi_total)
cor_text <- paste("r =", round(cor_result$estimate, 2))
p_value_text <- paste("p =", format.pval(cor_result$p.value, digits = 2))
# Create the plot with correlation text and p-value
ggplot(demo_df, aes(x = ladder_us, y = bdi_total)) +
geom_point(color = "black", size = 2) +  # Scatter plot points
geom_smooth(method = "lm", se = FALSE, color = "grey") +  # Add a linear regression line
labs(
x = "Subjective SES",
y = "Current depression score") +  # Add titles and labels
theme_minimal() +  # Use a minimal theme for a clean look
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),  # Title formatting
axis.title = element_text(size = 12)  # Axis title formatting
) +
annotate("text", x = max(demo_df$ladder_us), y = min(demo_df$ses), label = cor_text, hjust = 1, vjust = -1, size = 5, color = "black") +  # Add correlation coefficient
annotate("text", x = max(demo_df$ladder_us), y = min(demo_df$ses), label = p_value_text, hjust = 1, vjust = -2.5, size = 5, color = "black")  # Add p-value
#plot(ses ~ ladder_us, data=demo_df)
#cor.test(demo_df$ses, demo_df$ladder_us)
print("prior mood related diagnosis ~ demographics")
demo.ses <- lm(data = demo_df,
formula = md_anx_prior_diag ~ age + ses + ladder_us + female + poc + queer)
summary(aov(demo.ses))
print("BDI-II ~ demographics")
dep.demo <- lm(data = demo_df,
formula = bdi_total ~ age + ses + ladder_us + female + poc + queer + md_anx_prior_diag)
summary(aov(dep.demo))
print("PVSS ~ demographics")
anh.demo <- lm(data = demo_df,
formula = pvss_score ~ age + ses + ladder_us + female + poc + queer + md_anx_prior_diag)
summary(aov(anh.demo))
summary(demo.ses)
summary(dep.demo)
View(demo_df)
knitr::opts_chunk$set(echo = TRUE)
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us_s + md_anx_prior_diag + female + age_s, data=neg_df)
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=neg_df)
Anova(ancova_model, type="III")
library(dplyr)
library(car)
library(MuMIn)
library(lme4)
library(lmerTest)
library(multcomp)
library(Matrix)
library(tidyr)
library(MuMIn)
library(readxl)
library(ggpubr)
library(interactions)
library(performance) #checking model performance
library(DHARMa) # for simulateResiduals
#library(robustlmm) # robust fit
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=neg_df)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
# rescale slot for convergence
rl_data$ladder_us_s <- scale(rl_data$ladder_us)
rl_data$age_s <- scale(rl_data$age)
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=neg_df)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us_s + md_anx_prior_diag + female + age_s, data=neg_df)
# rescale slot for convergence
rl_data$ladder_us_s <- scale(rl_data$ladder_us)
rl_data$age_s <- scale(rl_data$age)
# RT LME per block
neg_df = subset(rl_data, block_type_recode == 'Negative')
mix_df = subset(rl_data, block_type_recode == 'Mixed')
pos_df = subset(rl_data, block_type_recode == 'Positive')
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us_s + md_anx_prior_diag + female + age_s, data=neg_df)
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=neg_df)
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=neg_df)
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=rl_data)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(car)
library(MuMIn)
library(lme4)
library(lmerTest)
library(multcomp)
library(Matrix)
library(tidyr)
library(MuMIn)
library(readxl)
library(ggpubr)
library(interactions)
library(performance) #checking model performance
library(DHARMa) # for simulateResiduals
#library(robustlmm) # robust fit
# RT LME per block
neg_df = subset(rl_data, block_type_recode == 'Negative')
mix_df = subset(rl_data, block_type_recode == 'Mixed')
pos_df = subset(rl_data, block_type_recode == 'Positive')
# RT LME per block
neg_df = subset(rl_data, block_type_recode == 'Negative')
mix_df = subset(rl_data, block_type_recode == 'Mixed')
pos_df = subset(rl_data, block_type_recode == 'Positive')
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=neg_df)
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia + ladder_us + md_anx_prior_diag + female + age, data=rl_data)
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=neg_df)
View(neg_df)
#rm(list = ls())
cpath = setwd('C:/Users/fuq01/Documents/GitHub/leap-analysis/prolific_3T_2023/master_data')
ug_data = read.csv("LEAP_baseline_ug_n236_analysis.csv")
rl_data = read.csv("LEAP_baseline_slot_n220_analysis.csv")
normalize <- function(x) {
return ((x - mean(x)) / sd(x))
}
var_recode = function(data){
data$edu_z <- normalize(data$edu_level)
data$income_z <- normalize(data$income_order)
data$ses <- data$edu_z + data$income_z
data$poc <- ifelse(data$race == "White", 0, 1) # POC coded as 1
data$female <- ifelse(data$sex == 2, 1, 0) # female coded as 1 (speak of the effect of being female)
data$depression <- factor(data$depression, levels = c("0", "1"), labels = c("Low", "High"))
data$anhedonia <- factor(data$anhedonia, levels = c("0", "1"), labels = c("Low", "High"))
data$group <- factor(data$group, levels = c("Healthy", "Depression", "Anhedonia", "Both"))
return(data)
}
ug_data = var_recode(ug_data)
rl_data = var_recode(rl_data)
rl_data$block_type_recode = factor(rl_data$block_type, levels = c("numberbar_mixed","numberbar_pos","numberbar_neg"),labels=c("Mixed","Positive","Negative"))
demo_df <- ug_data %>% distinct(participant, .keep_all=TRUE)
print('UG RT')
summary(ug_data$choice_rt)
print('Slot RT')
summary(rl_data$rt)
# RT LME per block
neg_df = subset(rl_data, block_type_recode == 'Negative')
mix_df = subset(rl_data, block_type_recode == 'Mixed')
pos_df = subset(rl_data, block_type_recode == 'Positive')
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=neg_df)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=mix_df)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=neg_df)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=pos_df)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia + ladder_us + md_anx_prior_diag + female + age, data=rl_data)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia + ladder_us + md_anx_prior_diag + female + age, data=rl_data)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "sex")
ancova_model = aov(optimal ~  depression + anhedonia
+ depression*anhedonia + ladder_us + md_anx_prior_diag + female + age, data=rl_data)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
ancova_model = aov(log_rt ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=neg_df)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
ancova_model = aov(log_rt ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=mix_df)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
ancova_model = aov(log_rt ~  depression + anhedonia
+ depression*anhedonia
+ ladder_us + md_anx_prior_diag + female + age, data=pos_df)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
ancova_model = aov(log_rt ~  depression + anhedonia
+ depression*anhedonia + optimal
+ ladder_us + md_anx_prior_diag + female + age, data=neg_df)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
ancova_model = aov(log_rt ~  depression + anhedonia
+ depression*anhedonia + optimal
+ ladder_us + md_anx_prior_diag + female + age, data=mix_df)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
ancova_model = aov(log_rt ~  depression + anhedonia
+ depression*anhedonia + optimal
+ ladder_us + md_anx_prior_diag + female + age, data=pos_df)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
ancova_model = aov(log_rt ~  depression + anhedonia + optimal
+ depression*anhedonia + ladder_us + md_anx_prior_diag + female + age, data=rl_data)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
#rm(list = ls())
cpath = setwd('C:/Users/fuq01/Documents/GitHub/leap-analysis/prolific_3T_2023/master_data')
ug_data = read.csv("LEAP_baseline_ug_n236_analysis.csv")
rl_data = read.csv("LEAP_baseline_slot_n220_analysis.csv")
normalize <- function(x) {
return ((x - mean(x)) / sd(x))
}
var_recode = function(data){
data$edu_z <- normalize(data$edu_level)
data$income_z <- normalize(data$income_order)
data$ses <- data$edu_z + data$income_z
data$poc <- ifelse(data$race == "White", 0, 1) # POC coded as 1
data$female <- ifelse(data$sex == 2, 1, 0) # female coded as 1 (speak of the effect of being female)
data$depression <- factor(data$depression, levels = c("0", "1"), labels = c("Low", "High"))
data$anhedonia <- factor(data$anhedonia, levels = c("0", "1"), labels = c("Low", "High"))
data$group <- factor(data$group, levels = c("Healthy", "Depression", "Anhedonia", "Both"))
return(data)
}
ug_data = var_recode(ug_data)
rl_data = var_recode(rl_data)
rl_data$block_type_recode = factor(rl_data$block_type, levels = c("numberbar_mixed","numberbar_pos","numberbar_neg"),labels=c("Mixed","Positive","Negative"))
demo_df <- ug_data %>% distinct(participant, .keep_all=TRUE)
print('UG RT')
summary(ug_data$choice_rt)
print('Slot RT')
summary(rl_data$rt)
# Mood rating: random intercept + slope, psych, task, demo fixed effect
#library(optimx)
ug.md.m1 <- lmer(data = ug_data,
formula = rating ~ depression + anhedonia + depression*anhedonia + factor(choice_acc)*offer
+ ladder_us + md_anx_prior_diag + female + age
+ (1 + offer + factor(choice_acc) | participant),
control = lmerControl(optimizer = "bobyqa", optCtrl = list(method = "L-BFGS-B", maxfun = 1e9)))
summary(ug.md.m1)
performance(ug.md.m1)
ug.md.m1z <- lmer(data = ug_data,
formula = rating_z ~ depression + anhedonia + depression*anhedonia + factor(choice_acc)*offer
+ ladder_us + md_anx_prior_diag + female + age
+ (1 + offer + factor(choice_acc) | participant),
control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e9)))
summary(ug.md.m1z)
performance(ug.md.m1z)
ancova_model = aov(rating_z ~ depression + anhedonia + depression*anhedonia + factor(choice_acc)*offer
+ ladder_us + md_anx_prior_diag + female + age, data=ug_data)
Anova(ancova_model, type="III")
TukeyHSD(ancova_model, which = "depression:anhedonia")
# Qixiu Fu, April 2024
library(R.matlab) # read MATLAB data formats into R
library(lme4)
# Set current folder path
cpath = setwd('C:/Users/fuq01/Documents/GitHub/Smoker-s-Forward-Thinking/Supplementary')
# read data
mat_ids <- readMat("IDs.mat")
mat_delta <- readMat("deltas.mat")
mat_bis <- readMat("BIS.mat")
mat_bdi <- readMat("prolific_sds.mat")
mat_risk <- readMat("risk_aversion.mat")
mat_choice <- readMat("task_param.mat")
bis_df <- read.csv("online_bis.csv")
bdi_df <- read.csv("fmri_bdi.csv")
# data reformat for online sample
group <- c("healthy")
ID <- unlist(mat_ids$ID.healthy)
delta <- unlist(mat_delta$delta.h)
bdi <- unlist(mat_bdi$healthy.sds)
risk <- unlist(mat_risk$Risk.pref.healthy)
rr <- unlist(mat_choice$healthy.task[,1])
mid_rr <- unlist(mat_choice$healthy.task[,3])
df_hc <- data.frame(ID, group, delta, bdi, risk, rr, mid_rr)
group <- c("smoker")
ID <- unlist(mat_ids$ID.smok)
delta <- unlist(mat_delta$smok.delta)
bdi <- unlist(mat_bdi$smok.sds)
risk <- unlist(mat_risk$Risk.pref.smok)
rr <- unlist(mat_choice$s.task[,1])
mid_rr <- unlist(mat_choice$s.task[,3])
df_sm <- data.frame(ID, group, delta, bdi, risk, rr, mid_rr)
df_online = rbind(df_hc, df_sm)
# (can't do interaction since there is no HC in-person BDI data)
fmri_bdi <- lm(data = bdi_df,
formula = delta ~ BDI)
summary(fmri_bdi)
anova(fmri_bdi)
View(bdi_df)
# functions
normalize <- function(x) {
return ((x - mean(x)) / sd(x))
}
group <- c("smoker")
ID <- unlist(mat_ids$ID.smok)
delta <- unlist(mat_delta$smok.delta)
bdi <- unlist(mat_bdi$smok.sds)
bdi_z <- normalize(mat_bdi$smok.sds)
risk <- unlist(mat_risk$Risk.pref.smok)
rr <- unlist(mat_choice$s.task[,1])
mid_rr <- unlist(mat_choice$s.task[,3])
df_sm <- data.frame(ID, group, delta, bdi,bdi_z, risk, rr, mid_rr)
df_online = rbind(df_hc, df_sm)
bdi_z <- normalize(mat_bdi$smok.sds)
# data reformat for online sample
group <- c("healthy")
ID <- unlist(mat_ids$ID.healthy)
delta <- unlist(mat_delta$delta.h)
bdi <- unlist(mat_bdi$healthy.sds)
bdi_z <- normalize(mat_bdi$healthy.sds)
risk <- unlist(mat_risk$Risk.pref.healthy)
rr <- unlist(mat_choice$healthy.task[,1])
mid_rr <- unlist(mat_choice$healthy.task[,3])
df_hc <- data.frame(ID, group, delta, bdi,bdi_z, risk, rr, mid_rr)
group <- c("smoker")
ID <- unlist(mat_ids$ID.smok)
delta <- unlist(mat_delta$smok.delta)
bdi <- unlist(mat_bdi$smok.sds)
bdi_z <- normalize(mat_bdi$smok.sds)
risk <- unlist(mat_risk$Risk.pref.smok)
rr <- unlist(mat_choice$s.task[,1])
mid_rr <- unlist(mat_choice$s.task[,3])
df_sm <- data.frame(ID, group, delta, bdi,bdi_z, risk, rr, mid_rr)
df_online = rbind(df_hc, df_sm)
View(bdi_df)
View(df_online)
View(bdi_df)
bdi_z <- normalize(bdi_df$BDI)
bdi_df$bdi_z <- normalize(bdi_df$BDI)
View(bdi_df)
fmri_bdi <- lm(data = bdi_df,
formula = delta ~ bdi_z)
summary(fmri_bdi)
anova(fmri_bdi)
View(bis_df)
View(bis_df)
bis_df$Total.BIS <- normalize(bis_df$Total.BIS)
View(bis_df)
# Qixiu Fu, April 2024
library(R.matlab) # read MATLAB data formats into R
library(lme4)
# Set current folder path
cpath = setwd('C:/Users/fuq01/Documents/GitHub/Smoker-s-Forward-Thinking/Supplementary')
# functions
normalize <- function(x) {
return ((x - mean(x)) / sd(x))
}
# read data
mat_ids <- readMat("IDs.mat")
mat_delta <- readMat("deltas.mat")
mat_bis <- readMat("BIS.mat")
mat_bdi <- readMat("prolific_sds.mat")
mat_risk <- readMat("risk_aversion.mat")
mat_choice <- readMat("task_param.mat")
bis_df <- read.csv("online_bis.csv")
bdi_df <- read.csv("fmri_bdi.csv")
bdi_df$bdi_z <- normalize(bdi_df$BDI)
bis_df$Total.BIS_z <- normalize(bis_df$Total.BIS)
# data reformat for online sample
group <- c("healthy")
ID <- unlist(mat_ids$ID.healthy)
delta <- unlist(mat_delta$delta.h)
bdi <- unlist(mat_bdi$healthy.sds)
bdi_z <- normalize(mat_bdi$healthy.sds)
risk <- unlist(mat_risk$Risk.pref.healthy)
rr <- unlist(mat_choice$healthy.task[,1])
mid_rr <- unlist(mat_choice$healthy.task[,3])
df_hc <- data.frame(ID, group, delta, bdi,bdi_z, risk, rr, mid_rr)
group <- c("smoker")
ID <- unlist(mat_ids$ID.smok)
delta <- unlist(mat_delta$smok.delta)
bdi <- unlist(mat_bdi$smok.sds)
bdi_z <- normalize(mat_bdi$smok.sds)
risk <- unlist(mat_risk$Risk.pref.smok)
rr <- unlist(mat_choice$s.task[,1])
mid_rr <- unlist(mat_choice$s.task[,3])
df_sm <- data.frame(ID, group, delta, bdi,bdi_z, risk, rr, mid_rr)
df_online = rbind(df_hc, df_sm)
View(bis_df)
# Delta ~ intercept + group (HC/smoker) + BIS total(online) + group x BIS
online_bis <- lm(data = bis_df,
formula = delta ~ group + Total.BIS_z + group*Total.BIS_z)
summary(online_bis)
anova(online_bis)
################## S6B online Mood ################################
# Delta ~ intercept + group (HC/smoker) + Zung (online) + group x Zung
online_delta <- lm(data = df_online,
formula = delta ~ group + bdi_z + bdi_z*group,
control = lmerControl(optCtrl = list(maxfun = 1e6)))
summary(online_delta)
anova(online_delta)
online_bis <- lm(data = bis_df,
formula = delta ~ group + Total.BIS_z + group*Total.BIS_z + bdi_z + bdi_z*group)
View(df_online)
View(bis_df)
